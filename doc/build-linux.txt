Ubuntu
------

Run the tools/build-ubuntu-deps.bash script. It should automagically
build the dependencies and naali itself. It should be up to date as
our buildbot uses it, i.e. it is ran after any commit to the
repository.

If all went well, you can try running the viewer:

 cd bin
 ./viewer

Other distributions
-------------------

We don't currently have such a automated script for other distributions.
The most up-to-date and specific documentation of the build process is that build script,
as the buildslaves in the test system build with it after every commit.
Please be in touch in e.g. #realxtend-dev irc channel on Freenode,
or on the realxtend-dev mailing list in google groups.

The viewer has many external libraries which may not be satisfied by default 
on many distributions. A list of dependencies can be found in them 
depencies.txt file. However not all of them will be missing from your 
installation (MD5 is a good example, it should be on all unix-like operating 
systems). 

Many distributions separate packages into two (or more parts): a users package
containing the binaries (ex: "foo"), and a developers package containging
headers and other development files (ex: "foo-devel" or "foo-debug"). You will
need both.

For cmake-gui users: 
----------------------------------------

1. Choose source code, example:  /my/path/to/code/viewer 
2. Choose location where binaries are build,  example: /my/path/to/build/directory
2.1 Choose view from Simple view to Groupped view (more informative)  
3. Hit the configure button, verify that all external libraries are found
4. After successful configuration hit the Generate button which will create actual Makefile which 
is located in your build directory. 
5. Go to your build directory and run $ make  

For plain cmake users: 
----------------------------------------
 
0. Change to viewer code directory
1. Run $ NAALI_DEP_PATH=/path/to/external/deps cmake .  
2. Assure that cmake found all external libraries 
3. Run $ make  

Known problems: 

1. If the build crashes with "relocation R_X86_64_32 against `a local symbol'"
message, ensure that all your statically linked external libraries are compiled
with -fPIC flag, OR only use shared libraries.

2. Remember to change linux-plugins.cfg file to point current location of your 
OGRE plugins (it can be example /usr/local/lib/OGRE)

3. Remember that viewer searches plugins and configuration files 
to load from it own current directory this means that your folder where 
viewer executable lies has to have next folders and files: 

* data/ 
* media/ 
* modules/ 
* plugins.cfg 
* plugins-unix.cfg  
* pymodules  
* resources.cfg  
* testing 
